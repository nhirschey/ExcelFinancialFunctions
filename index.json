[{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions.html","title":"Excel.FinancialFunctions","content":"AccrIntCalcMethod \nDayCountBasis \nFinancial \nFrequency \nPaymentDue \nVdbSwitch"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-accrintcalcmethod.html","title":"AccrIntCalcMethod","content":"AccrIntCalcMethod \n\n Indicates whether accrued interest is computed from issue date (by default) or first interest to settlement\n \nAccrIntCalcMethod.FromFirstToSettlement \nFromFirstToSettlement \nAccrIntCalcMethod.FromIssueToSettlement \nFromIssueToSettlement"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-accrintcalcmethod.html#FromFirstToSettlement","title":"AccrIntCalcMethod.FromFirstToSettlement","content":"AccrIntCalcMethod.FromFirstToSettlement \nFromFirstToSettlement \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-accrintcalcmethod.html#FromIssueToSettlement","title":"AccrIntCalcMethod.FromIssueToSettlement","content":"AccrIntCalcMethod.FromIssueToSettlement \nFromIssueToSettlement \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html","title":"DayCountBasis","content":"DayCountBasis \n\n The type of Day Count Basis\n \nDayCountBasis.UsPsa30_360 \nUsPsa30_360 \nDayCountBasis.ActualActual \nActualActual \nDayCountBasis.Actual360 \nActual360 \nDayCountBasis.Actual365 \nActual365 \nDayCountBasis.Europ30_360 \nEurop30_360"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html#UsPsa30_360","title":"DayCountBasis.UsPsa30_360","content":"DayCountBasis.UsPsa30_360 \nUsPsa30_360 \n\n US 30/360\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html#ActualActual","title":"DayCountBasis.ActualActual","content":"DayCountBasis.ActualActual \nActualActual \n\n Actual/Actual\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html#Actual360","title":"DayCountBasis.Actual360","content":"DayCountBasis.Actual360 \nActual360 \n\n Actual/360\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html#Actual365","title":"DayCountBasis.Actual365","content":"DayCountBasis.Actual365 \nActual365 \n\n Actual/365\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-daycountbasis.html#Europ30_360","title":"DayCountBasis.Europ30_360","content":"DayCountBasis.Europ30_360 \nEurop30_360 \n\n European 30/360\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html","title":"Financial","content":"Financial \n\n A wrapper class to expose the Excel financial functions API to .NET clients\n \nFinancial.AccrInt \nAccrInt \nFinancial.AccrInt \nAccrInt \nFinancial.AccrIntM \nAccrIntM \nFinancial.AmorDegrc \nAmorDegrc \nFinancial.AmorLinc \nAmorLinc \nFinancial.CoupDays \nCoupDays \nFinancial.CoupDaysBS \nCoupDaysBS \nFinancial.CoupDaysNC \nCoupDaysNC \nFinancial.CoupNCD \nCoupNCD \nFinancial.CoupNum \nCoupNum \nFinancial.CoupPCD \nCoupPCD \nFinancial.CumIPmt \nCumIPmt \nFinancial.CumPrinc \nCumPrinc \nFinancial.Db \nDb \nFinancial.Db \nDb \nFinancial.Ddb \nDdb \nFinancial.Ddb \nDdb \nFinancial.Disc \nDisc \nFinancial.DollarDe \nDollarDe \nFinancial.DollarFr \nDollarFr \nFinancial.Duration \nDuration \nFinancial.Effect \nEffect \nFinancial.Fv \nFv \nFinancial.FvSchedule \nFvSchedule \nFinancial.IPmt \nIPmt \nFinancial.ISPmt \nISPmt \nFinancial.IntRate \nIntRate \nFinancial.Irr \nIrr \nFinancial.Irr \nIrr \nFinancial.MDuration \nMDuration \nFinancial.Mirr \nMirr \nFinancial.NPer \nNPer \nFinancial.Nominal \nNominal \nFinancial.Npv \nNpv \nFinancial.OddFPrice \nOddFPrice \nFinancial.OddFYield \nOddFYield \nFinancial.OddLPrice \nOddLPrice \nFinancial.OddLYield \nOddLYield \nFinancial.PPmt \nPPmt \nFinancial.Pmt \nPmt \nFinancial.Price \nPrice \nFinancial.PriceDisc \nPriceDisc \nFinancial.PriceMat \nPriceMat \nFinancial.Pv \nPv \nFinancial.Rate \nRate \nFinancial.Rate \nRate \nFinancial.Received \nReceived \nFinancial.Sln \nSln \nFinancial.Syd \nSyd \nFinancial.TBillEq \nTBillEq \nFinancial.TBillPrice \nTBillPrice \nFinancial.TBillYield \nTBillYield \nFinancial.Vdb \nVdb \nFinancial.Vdb \nVdb \nFinancial.Vdb \nVdb \nFinancial.XIrr \nXIrr \nFinancial.XIrr \nXIrr \nFinancial.XNpv \nXNpv \nFinancial.YearFrac \nYearFrac \nFinancial.Yield \nYield \nFinancial.YieldDisc \nYieldDisc \nFinancial.YieldMat \nYieldMat"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#AccrInt","title":"Financial.AccrInt","content":"Financial.AccrInt \nAccrInt \n\n The accrued interest for a security that pays periodic interest ([learn more](http://office.microsoft.com/en-us/excel/HP052089791033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#AccrInt","title":"Financial.AccrInt","content":"Financial.AccrInt \nAccrInt \n\n The accrued interest for a security that pays periodic interest ([learn more](http://office.microsoft.com/en-us/excel/HP052089791033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#AccrIntM","title":"Financial.AccrIntM","content":"Financial.AccrIntM \nAccrIntM \n\n The accrued interest for a security that pays interest at maturity ([learn more](http://office.microsoft.com/en-us/excel/HP052089801033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#AmorDegrc","title":"Financial.AmorDegrc","content":"Financial.AmorDegrc \nAmorDegrc \n\n The depreciation for each accounting period by using a depreciation coefficient ([learn more](http://office.microsoft.com/en-us/excel/HP052089841033.aspx))  \n ExcelCompliant is used because Excel stores 13 digits. AmorDegrc algorithm rounds numbers  \n and returns different results unless the numbers get rounded to 13 digits before rounding them.  \n I.E. 22.49999999999999 is considered 22.5 by Excel, but 22.4 by the .NET framework    \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#AmorLinc","title":"Financial.AmorLinc","content":"Financial.AmorLinc \nAmorLinc \n\n The depreciation for each accounting period ([learn more](http://office.microsoft.com/en-us/excel/HP052089851033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupDays","title":"Financial.CoupDays","content":"Financial.CoupDays \nCoupDays \n\n The number of days in the coupon period that contains the settlement date ([learn more](http://office.microsoft.com/en-us/excel/HP052090311033.aspx))  \n The Excel algorithm seems wrong in that it doesn\u0027t respect \u0060coupDays = coupDaysBS \u002B coupDaysNC\u0060    \n This equality should stand. The differs from Excel by \u002B/- one or two days when the date spans a leap year.\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupDaysBS","title":"Financial.CoupDaysBS","content":"Financial.CoupDaysBS \nCoupDaysBS \n\n The number of days from the beginning of the coupon period to the settlement date ([learn more](http://office.microsoft.com/en-us/excel/HP052090301033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupDaysNC","title":"Financial.CoupDaysNC","content":"Financial.CoupDaysNC \nCoupDaysNC \n\n The number of days from the settlement date to the next coupon date ([learn more](http://office.microsoft.com/en-us/excel/HP052090321033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupNCD","title":"Financial.CoupNCD","content":"Financial.CoupNCD \nCoupNCD \n\n The next coupon date after the settlement date ([learn more](http://office.microsoft.com/en-us/excel/HP052090331033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupNum","title":"Financial.CoupNum","content":"Financial.CoupNum \nCoupNum \n\n The number of coupons payable between the settlement date and maturity date ([learn more](http://office.microsoft.com/en-us/excel/HP052090341033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CoupPCD","title":"Financial.CoupPCD","content":"Financial.CoupPCD \nCoupPCD \n\n The previous coupon date before the settlement date ([learn more](http://office.microsoft.com/en-us/excel/HP052090351033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CumIPmt","title":"Financial.CumIPmt","content":"Financial.CumIPmt \nCumIPmt \n\n The cumulative interest paid between two periods ([learn more](http://office.microsoft.com/en-us/excel/HP052090381033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#CumPrinc","title":"Financial.CumPrinc","content":"Financial.CumPrinc \nCumPrinc \n\n The cumulative principal paid on a loan between two periods ([learn more](http://office.microsoft.com/en-us/excel/HP052090391033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Db","title":"Financial.Db","content":"Financial.Db \nDb \n\n The depreciation of an asset for a specified period by using the fixed-declining balance method\n ([learn more](http://office.microsoft.com/en-us/excel/HP052090481033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Db","title":"Financial.Db","content":"Financial.Db \nDb \n\n The depreciation of an asset for a specified period by using the fixed-declining balance method\n ([learn more](http://office.microsoft.com/en-us/excel/HP052090481033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Ddb","title":"Financial.Ddb","content":"Financial.Ddb \nDdb \n\n The depreciation of an asset for a specified period by using the double-declining balance method or some other method that you specify ([learn more](http://office.microsoft.com/en-us/excel/HP052090511033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Ddb","title":"Financial.Ddb","content":"Financial.Ddb \nDdb \n\n The depreciation of an asset for a specified period by using the double-declining balance method or some other method that you specify ([learn more](http://office.microsoft.com/en-us/excel/HP052090511033.aspx))\n Excel Ddb has two interesting characteristics:  \n 1. It special cases ddb for fractional periods between 0 and 1 by considering them to be 1  \n 2. It is inconsistent with VDB(..., True) for fractional periods, even if VDB(..., True) is defined to be the same as ddb. The algorithm for VDB is theoretically correct.  \n This function makes the same 1. adjustment.\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Disc","title":"Financial.Disc","content":"Financial.Disc \nDisc \n\n The discount rate for a security ([learn more](http://office.microsoft.com/en-us/excel/HP052090601033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#DollarDe","title":"Financial.DollarDe","content":"Financial.DollarDe \nDollarDe \n\n Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number ([learn more](http://office.microsoft.com/en-us/excel/HP052090641033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#DollarFr","title":"Financial.DollarFr","content":"Financial.DollarFr \nDollarFr \n\n Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction ([learn more](http://office.microsoft.com/en-us/excel/HP052090651033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Duration","title":"Financial.Duration","content":"Financial.Duration \nDuration \n\n The annual duration of a security with periodic interest payments ([learn more](http://office.microsoft.com/en-us/excel/HP052090701033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Effect","title":"Financial.Effect","content":"Financial.Effect \nEffect \n\n The effective annual interest rate ([learn more](http://office.microsoft.com/en-us/excel/HP052090741033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Fv","title":"Financial.Fv","content":"Financial.Fv \nFv \n\n The future value of an investment ([learn more](http://office.microsoft.com/en-us/excel/HP052090991033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#FvSchedule","title":"Financial.FvSchedule","content":"Financial.FvSchedule \nFvSchedule \n\n The future value of an initial principal after applying a series of compound interest rates ([learn more](http://office.microsoft.com/en-us/excel/HP052091001033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#IPmt","title":"Financial.IPmt","content":"Financial.IPmt \nIPmt \n\n The interest payment for an investment for a given period ([learn more](http://office.microsoft.com/en-us/excel/HP052091451033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#ISPmt","title":"Financial.ISPmt","content":"Financial.ISPmt \nISPmt \n\n Calculates the interest paid during a specific period of an investment ([learn more](http://office.microsoft.com/en-us/excel/HP052508401033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#IntRate","title":"Financial.IntRate","content":"Financial.IntRate \nIntRate \n\n The interest rate for a fully invested security ([learn more](http://office.microsoft.com/en-us/excel/HP052091441033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Irr","title":"Financial.Irr","content":"Financial.Irr \nIrr \n\n The internal rate of return for a series of cash flows ([learn more](http://office.microsoft.com/en-us/excel/HP052091461033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Irr","title":"Financial.Irr","content":"Financial.Irr \nIrr \n\n The internal rate of return for a series of cash flows ([learn more](http://office.microsoft.com/en-us/excel/HP052091461033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#MDuration","title":"Financial.MDuration","content":"Financial.MDuration \nMDuration \n\n The Macauley modified duration for a security with an assumed par value of $100 ([learn more](http://office.microsoft.com/en-us/excel/HP052091731033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Mirr","title":"Financial.Mirr","content":"Financial.Mirr \nMirr \n\n The internal rate of return where positive and negative cash flows are financed at different rates ([learn more](http://office.microsoft.com/en-us/excel/HP052091801033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#NPer","title":"Financial.NPer","content":"Financial.NPer \nNPer \n\n The number of periods for an investment ([learn more](http://office.microsoft.com/en-us/excel/HP052091981033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Nominal","title":"Financial.Nominal","content":"Financial.Nominal \nNominal \n\n The annual nominal interest rate ([learn more](http://office.microsoft.com/en-us/excel/HP052091911033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Npv","title":"Financial.Npv","content":"Financial.Npv \nNpv \n\n The net present value of an investment based on a series of periodic cash flows and a discount rate ([learn more](http://office.microsoft.com/en-us/excel/HP052091991033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#OddFPrice","title":"Financial.OddFPrice","content":"Financial.OddFPrice \nOddFPrice \n\n The price per $100 face value of a security with an odd first period ([learn more](http://office.microsoft.com/en-us/excel/HP052092041033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#OddFYield","title":"Financial.OddFYield","content":"Financial.OddFYield \nOddFYield \n\n The yield of a security with an odd first period ([learn more](http://office.microsoft.com/en-us/excel/HP052092051033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#OddLPrice","title":"Financial.OddLPrice","content":"Financial.OddLPrice \nOddLPrice \n\n The price per $100 face value of a security with an odd last period ([learn more](http://office.microsoft.com/en-us/excel/HP052092061033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#OddLYield","title":"Financial.OddLYield","content":"Financial.OddLYield \nOddLYield \n\n The yield of a security with an odd last period ([learn more](http://office.microsoft.com/en-us/excel/HP052092071033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#PPmt","title":"Financial.PPmt","content":"Financial.PPmt \nPPmt \n\n The payment on the principal for an investment for a given period ([learn more](http://office.microsoft.com/en-us/excel/HP052092181033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Pmt","title":"Financial.Pmt","content":"Financial.Pmt \nPmt \n\n The periodic payment for an annuity ([learn more](http://office.microsoft.com/en-us/excel/HP052092151033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Price","title":"Financial.Price","content":"Financial.Price \nPrice \n\n The price per $100 face value of a security that pays periodic interest ([learn more](http://office.microsoft.com/en-us/excel/HP052092191033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#PriceDisc","title":"Financial.PriceDisc","content":"Financial.PriceDisc \nPriceDisc \n\n The price per $100 face value of a discounted security ([learn more](http://office.microsoft.com/en-us/excel/HP052092201033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#PriceMat","title":"Financial.PriceMat","content":"Financial.PriceMat \nPriceMat \n\n The price per $100 face value of a security that pays interest at maturity ([learn more](http://office.microsoft.com/en-us/excel/HP052092211033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Pv","title":"Financial.Pv","content":"Financial.Pv \nPv \n\n The present value of an investment ([learn more](http://office.microsoft.com/en-us/excel/HP052092251033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Rate","title":"Financial.Rate","content":"Financial.Rate \nRate \n\n The interest rate per period of an annuity ([learn more](http://office.microsoft.com/en-us/excel/HP052092321033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Rate","title":"Financial.Rate","content":"Financial.Rate \nRate \n\n The interest rate per period of an annuity ([learn more](http://office.microsoft.com/en-us/excel/HP052092321033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Received","title":"Financial.Received","content":"Financial.Received \nReceived \n\n The amount received at maturity for a fully invested security ([learn more](http://office.microsoft.com/en-us/excel/HP052092331033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Sln","title":"Financial.Sln","content":"Financial.Sln \nSln \n\n The straight-line depreciation of an asset for one period ([learn more](http://office.microsoft.com/en-us/excel/HP052092631033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Syd","title":"Financial.Syd","content":"Financial.Syd \nSyd \n\n The sum-of-years\u0027 digits depreciation of an asset for a specified period ([learn more](http://office.microsoft.com/en-us/excel/HP052093021033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#TBillEq","title":"Financial.TBillEq","content":"Financial.TBillEq \nTBillEq \n\n The bond-equivalent yield for a Treasury bill ([learn more](http://office.microsoft.com/en-us/excel/HP052093091033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#TBillPrice","title":"Financial.TBillPrice","content":"Financial.TBillPrice \nTBillPrice \n\n The price per $100 face value for a Treasury bill ([learn more](http://office.microsoft.com/en-us/excel/HP052093101033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#TBillYield","title":"Financial.TBillYield","content":"Financial.TBillYield \nTBillYield \n\n The yield for a Treasury bill ([learn more](http://office.microsoft.com/en-us/excel/HP052093111033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Vdb","title":"Financial.Vdb","content":"Financial.Vdb \nVdb \n\n The depreciation of an asset for a specified or partial period by using a declining balance method ([learn more](http://office.microsoft.com/en-us/excel/HP052093341033.aspx))  \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Vdb","title":"Financial.Vdb","content":"Financial.Vdb \nVdb \n\n The depreciation of an asset for a specified or partial period by using a declining balance method ([learn more](http://office.microsoft.com/en-us/excel/HP052093341033.aspx))  \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Vdb","title":"Financial.Vdb","content":"Financial.Vdb \nVdb \n\n The depreciation of an asset for a specified or partial period by using a declining balance method ([learn more](http://office.microsoft.com/en-us/excel/HP052093341033.aspx))  \n In the excel version of this algorithm the depreciation in the period (0,1) is not the same as the sum of the depreciations in periods (0,0.5) (0.5,1)  \n \u0060VDB(100,10,13,0,0.5,1,0) \u002B VDB(100,10,13,0.5,1,1,0) \u003C\u003E VDB(100,10,13,0,1,1,0)\u0060  \n Notice that in Excel by using \u00271\u0027 (no_switch) instead of \u00270\u0027 as the last parameter everything works as expected.  \n In truth, the last parameter should have no influence in the calculation given that in the first period there is no switch to sln depreciation.  \n Overall, I think my algorithm is correct, even if it disagrees with Excel when startperiod is fractional.\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#XIrr","title":"Financial.XIrr","content":"Financial.XIrr \nXIrr \n\n The internal rate of return for a schedule of cash flows that is not necessarily periodic ([learn more](http://office.microsoft.com/en-us/excel/HP052093411033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#XIrr","title":"Financial.XIrr","content":"Financial.XIrr \nXIrr \n\n The internal rate of return for a schedule of cash flows that is not necessarily periodic ([learn more](http://office.microsoft.com/en-us/excel/HP052093411033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#XNpv","title":"Financial.XNpv","content":"Financial.XNpv \nXNpv \n\n The net present value for a schedule of cash flows that is not necessarily periodic ([learn more](http://office.microsoft.com/en-us/excel/HP052093421033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#YearFrac","title":"Financial.YearFrac","content":"Financial.YearFrac \nYearFrac \n\n Calculates the fraction of the year represented by the number of whole days between two dates - not a financial function\n ([learn more](http://office.microsoft.com/en-us/excel/HP052093441033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#Yield","title":"Financial.Yield","content":"Financial.Yield \nYield \n\n The yield on a security that pays periodic interest ([learn more](http://office.microsoft.com/en-us/excel/HP052093451033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#YieldDisc","title":"Financial.YieldDisc","content":"Financial.YieldDisc \nYieldDisc \n\n The annual yield for a discounted security; for example, a Treasury bill ([learn more](http://office.microsoft.com/en-us/excel/HP052093461033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-financial.html#YieldMat","title":"Financial.YieldMat","content":"Financial.YieldMat \nYieldMat \n\n The annual yield of a security that pays interest at maturity ([learn more](http://office.microsoft.com/en-us/excel/HP052093471033.aspx))\n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-frequency.html","title":"Frequency","content":"Frequency \n\n The number of coupon payments per year\n \nFrequency.Annual \nAnnual \nFrequency.SemiAnnual \nSemiAnnual \nFrequency.Quarterly \nQuarterly"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-frequency.html#Annual","title":"Frequency.Annual","content":"Frequency.Annual \nAnnual \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-frequency.html#SemiAnnual","title":"Frequency.SemiAnnual","content":"Frequency.SemiAnnual \nSemiAnnual \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-frequency.html#Quarterly","title":"Frequency.Quarterly","content":"Frequency.Quarterly \nQuarterly \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-paymentdue.html","title":"PaymentDue","content":"PaymentDue \n\n Indicates when payments are due (end/beginning of period)\n \nPaymentDue.EndOfPeriod \nEndOfPeriod \nPaymentDue.BeginningOfPeriod \nBeginningOfPeriod"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-paymentdue.html#EndOfPeriod","title":"PaymentDue.EndOfPeriod","content":"PaymentDue.EndOfPeriod \nEndOfPeriod \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-paymentdue.html#BeginningOfPeriod","title":"PaymentDue.BeginningOfPeriod","content":"PaymentDue.BeginningOfPeriod \nBeginningOfPeriod \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-vdbswitch.html","title":"VdbSwitch","content":"VdbSwitch \n\n Specifies whether to switch to straight-line depreciation when depreciation is greater than the declining balance calculation\n \nVdbSwitch.DontSwitchToStraightLine \nDontSwitchToStraightLine \nVdbSwitch.SwitchToStraightLine \nSwitchToStraightLine"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-vdbswitch.html#DontSwitchToStraightLine","title":"VdbSwitch.DontSwitchToStraightLine","content":"VdbSwitch.DontSwitchToStraightLine \nDontSwitchToStraightLine \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/reference/excel-financialfunctions-vdbswitch.html#SwitchToStraightLine","title":"VdbSwitch.SwitchToStraightLine","content":"VdbSwitch.SwitchToStraightLine \nSwitchToStraightLine \n"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/compatibility.html","title":"Compatibility\n","content":"(*** hide ***)\n#I \u0022../src/ExcelFinancialFunctions/bin/Release/netstandard2.0\u0022\n#r \u0022ExcelFinancialFunctions.dll\u0022\n\nopen System\nopen Excel.FinancialFunctions\n\n(**\nCompatibility\n=============\n\nThis library replicates Excel behavior. There\u0027re 199,252 tests verifying the results against Excel 2010 and their number can be raised significantly by adding new test values. Several tests check the function properties, e.g. that bond duration can\u0027t be greater than maturity.    \nThe current version matches Excel 2010, which is slightly different from 2003, see [Function Improvements in Excel 2010](http://blogs.office.com/b/microsoft-excel/archive/2009/09/10/function-improvements-in-excel-2010.aspx). \nNote, that console tests require Excel, whereas the unit tests can be run even on mono - their parameters and expected results are stored in files. \n  \n\nHowever, there\u0027re still some differences comparing to Excel. \n_Read more about OpenOffice vs Excel [here](openofficediff.html)._\n\n\nCOUPDAYS\n--------\n\nThe Excel algorithm doesn\u0027t respect equality \u0060coupDays = coupDaysBS \u002B coupDaysNC\u0060. The library result differs from Excel by \u002B/- one or two days when the date spans a leap year. ([office docs](http://office.microsoft.com/en-us/excel/HP052090311033.aspx))  \n*)\n\nlet settlement = DateTime(2012, 1, 1)\nlet maturity   = DateTime(2016, 2, 29)\n\nlet param = settlement, maturity, Frequency.SemiAnnual, DayCountBasis.ActualActual\n\nlet days = Financial.CoupDays param\nlet bs = Financial.CoupDaysBS param\nlet nc = Financial.CoupDaysNC param\n// Excel: 2\ndays - bs - nc\n// [fsi:val days : float = 182.0]\n// [fsi:val bs : float = 123.0]\n// [fsi:val nc : float = 59.0]\n// [fsi:val it : float = 0.0]\n\n\n(** \nVDB\n---\n\nIn the Excel version of this algorithm the depreciation in the period (0,1) is not the same as the sum of the depreciations in periods (0,0.5) (0.5,1)  \nNotice that in Excel by using \u00271\u0027 (no_switch) instead of \u00270\u0027 as the last parameter everything works as expected.  \nIn truth, the last parameter should have no influence in the calculation given that in the first period there is no switch to sln depreciation.  \nOverall, the algorithm is correct, even if it disagrees with Excel when startperiod is fractional. ([office docs](http://office.microsoft.com/en-us/excel/HP052093341033.aspx))  \n*)\n\nlet vdb sp ep switch = \n    Financial.Vdb(100.0, 10.0, 13.0, sp, ep, 1.0, \n        if switch then VdbSwitch.SwitchToStraightLine else VdbSwitch.DontSwitchToStraightLine)\n\nlet p1 = vdb 0.0 0.5 false\nlet p2 = vdb 0.5 1.0 false\nlet total = vdb 0.0 1.0 false\n// Excel: 0.1479\ntotal - p1 - p2 \n// [fsi:val p1 : float = 3.846153846]\n// [fsi:val p2 : float = 3.846153846]\n// [fsi:val total : float = 7.692307692]\n// [fsi:val it : float = 0.0]\n\nlet p1sw = vdb 0.0 0.5 true\nlet p2sw = vdb 0.5 1.0 true\nlet totalsw = vdb 0.0 1.0 true\n// Excel: 0.0000\ntotalsw - p1sw - p2sw \n// [fsi:val p1sw : float = 3.846153846]\n// [fsi:val p2sw : float = 3.846153846]\n// [fsi:val totalsw : float = 7.692307692]\n// [fsi:val it : float = 0.0]\n\n\n(**\nAMORDEGRC\n---------\n\nExcelCompliant is used because Excel stores 13 digits. AmorDegrc algorithm rounds numbers  \nand returns different results unless the numbers get rounded to 13 digits before rounding them.  \nI.E. 22.49999999999999 is considered 22.5 by Excel, but 22.4 by the .NET framework. ([office docs](http://office.microsoft.com/en-us/excel/HP052089841033.aspx))     \n*)\n\nlet amorDegrc excelCompliant = \n    Financial.AmorDegrc(100.0, DateTime(2014,1,1), DateTime(2016,1,1), \n        50.0, 1.0, 0.3, DayCountBasis.ActualActual, excelCompliant)\n\namorDegrc true\n// [fsi:val it : float = 23.0]\namorDegrc false\n// [fsi:val it : float = 22.0]\n\n\n(**\nDDB\n---\n\nExcel Ddb has two interesting characteristics:  \n1. It special cases ddb for fractional periods between 0 and 1 by considering them to be 1  \n2. It is inconsistent with VDB(..., True) for fractional periods, even if VDB(..., True) is defined to be the same as ddb. The algorithm for VDB is theoretically correct.  \nThis function makes the same 1. adjustment.([office docs](http://office.microsoft.com/en-us/excel/HP052090511033.aspx))\n*)\n\n\n(**\nRATE and ODDFYIELD\n------------------\n\nExcel uses a different root finding algo. Sometimes the library results are better, sometimes Excel\u0027s. ([office docs](http://office.microsoft.com/en-us/excel/HP052092321033.aspx))\n*)\n\n(**\nXIRR and XNPV\n-------------\n\nXIRR and XNPV functions are related: the net present value, given the internal rate of return, should be zero.\nHowever, XNPV works only for positive rates even though the XIRR results might be negative. \nThe results can also be different because of the root finding functions. ([office docs](http://office.microsoft.com/en-us/excel/HP052093411033.aspx))\n*)\n\nlet dates = [|DateTime(2000, 2, 29); DateTime(2000, 3, 31)|]\nlet values = [|206101714.849377; -156650972.54265|]\n// Excel: -0.960452189\nFinancial.XIrr(values, dates, -0.1)\n// [fsi:val it : float = -0.960452195]\n// Excel: #NUM!\nFinancial.XNpv(-0.960452195, values, dates)\n// [fsi:val it : float = -0.008917063475]\n// Excel: #NUM!\nFinancial.XNpv(-0.960452189, values, dates)\n// [fsi:val it : float = 2.646784514]\n\nlet values2 = [|15108163.3840923; -75382259.6628424|]\n// Excel: #NUM!\nFinancial.XIrr(values2, dates, -0.1)\n// [fsi:val it : float = 165601346.1]\n// Excel: 165601345.6\nFinancial.XIrr(values2, dates, 0.1)\n// [fsi:val it : float = 165601346.1]\nFinancial.XNpv(165601346.1, values2, dates)\n// [fsi:val it : float = -0.000269997865]\nFinancial.XNpv(165601345.6, values2, dates)\n// [fsi:val it : float = -0.004144238308]"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/index.html","title":"Excel Financial Functions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \u0022../src/ExcelFinancialFunctions/bin/Release/netstandard2.0\u0022\n\n(**\n\nExcel Financial Functions\n===================\n\nThis is a .NET library that provides the full set of financial functions from Excel. \nIt can be used from both F# and C# as well as from other .NET languages.\nThe main goal for the library is compatibility with Excel, by providing the same functions, \nwith the same behaviour. \n\nNote though that this is not a wrapper over the Excel library; the functions have been \nre-implemented in managed code so that you do not need to have Excel installed to use this library.\n\nThe package is available on \u003Ca href=\u0022https://nuget.org/packages/ExcelFinancialFunctions\u0022\u003ENuGet\u003C/a\u003E. [![NuGet Status](//img.shields.io/nuget/v/ExcelFinancialFunctions?style=flat)](https://www.nuget.org/packages/ExcelFinancialFunctions/)\n\nYou can also use \u0060ExcelFinancialFunctions\u0060 in [dotnet interactive](https://github.com/dotnet/interactive) \nnotebooks, in [Visual Studio Code](https://code.visualstudio.com/) \nor [Jupyter](https://jupyter.org/), or in F# scripts (\u0060.fsx\u0060 files), \nby referencing the package as follows:\n\n    #r \u0022nuget: ExcelFinancialFunctions\u0022 // Use the latest version \n\nExample\n-------\n\nThis example demonstrates using the YIELD function to calculate bond yield.\n\n*)\n#r \u0022ExcelFinancialFunctions.dll\u0022\nopen System\nopen Excel.FinancialFunctions\n\n// returns 0.065 or 6.5%\nFinancial.Yield (DateTime(2008,2,15), DateTime(2016,11,15), 0.0575, 95.04287, 100.0, \n                 Frequency.SemiAnnual, DayCountBasis.UsPsa30_360)\n\n\n(**\n\nSamples \u0026 documentation\n-----------------------\n\nThe library comes with comprehensible documentation. The tutorials and articles are\nautomatically generated from \u0060*.fsx\u0060 files in [the docs folder][docs]. The API \nreference is automatically generated from Markdown comments in the library implementation.\n\n* [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions in the library. This includes the links to the Excel documentation.\n* [Excel Compatibility](compatibility.html) section explains the possible differences with Excel\u0027s results. \n  \nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. \n\nThe library was originally developed by Luca Bolognese, the initial version can be\ndownloaded [here][msdn]. It is available under Apache License, for more information \nsee the [License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fsprojects/ExcelFinancialFunctions/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/ExcelFinancialFunctions\n  [issues]: https://github.com/fsprojects/ExcelFinancialFunctions/issues\n  [readme]: https://github.com/fsprojects/ExcelFinancialFunctions/blob/master/README.md\n  [license]: https://github.com/fsprojects/ExcelFinancialFunctions/blob/master/LICENSE.txt\n  [msdn]: http://code.msdn.microsoft.com/office/Excel-Financial-functions-6afc7d42\n*)"},{"uri":"http://fsprojects.github.io/ExcelFinancialFunctions/openofficediff.html","title":"Difference between OpenOffice and the library\n","content":"(*** hide ***)\n#I \u0022../src/ExcelFinancialFunctions/bin/Release/netstandard2.0\u0022\n#r \u0022ExcelFinancialFunctions.dll\u0022\n\nopen System\nopen Excel.FinancialFunctions\n\n(**\nDifference between OpenOffice and the library\n=============================================\n\nThe library was designed to be Excel-compliant (see [Compatibility](compatibility.html) section), therefore its behavior is different from OpenOffice/LibreOffice. \nMost of the differences are because of the day count conventions and root finding algorithm implementation details.\nSome examples are provided below. \n*)\n\n(**\nODDFYIELD, ODDFPRICE\n--------------------\n\nAccording to the [OO wiki](https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_ODDFYIELD_function), \nthese functions currently return invalid results (it\u0027s #VALUE! even for valid inputs). \n*)\n\nFinancial.OddFYield(DateTime(2008, 12, 11), DateTime(2021, 4, 1), DateTime(2008, 10, 15), \n    DateTime(2009, 4, 1), 0.06, 100., 100., Frequency.Quarterly, DayCountBasis.ActualActual)\n// [fsi:Excel: 0.059976999]\nFinancial.OddFPrice(DateTime(1999, 2, 28), DateTime(2010, 6, 30), DateTime(1998, 2, 28),\n    DateTime(2009, 6, 30), 0.07, 0.03, 100., Frequency.Annual, DayCountBasis.Actual360)\n// [fsi:Excel: 127.9031274]\n\n(**\nODDLYIELD, OODLPRICE\n--------------------\n\nThe functions return different results. ODDLYIELD example can be found [here](https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_ODDLYIELD_function).\n*)\n\nFinancial.OddLPrice(DateTime(1999, 2, 28), DateTime(2000, 2, 28), DateTime(1998, 2, 28),\n    0.07, 0.03, 130., Frequency.SemiAnnual, DayCountBasis.Actual360)\n// [fsi:Excel: 132.8058252  LibreOffice: 132.8407748124]\n\nFinancial.OddLYield(DateTime(1990, 6, 1), DateTime(1995, 12, 31), DateTime(1990, 1, 1),\n    0.002, 103., 100., Frequency.Quarterly, DayCountBasis.ActualActual)\n// [fsi:Excel: -0.00327563  LibreOffice: -0.002925876]\n// Returns the same value even though the frequency is different\nFinancial.OddLYield(DateTime(1990, 6, 1), DateTime(1995, 12, 31), DateTime(1990, 1, 1),\n    0.002, 103., 100., Frequency.Annual, DayCountBasis.ActualActual)\n// [fsi:Excel: -0.00327205  LibreOffice: -0.002925876] \n\n(**\nACCRINT, DISC, DURATION, PRICE, YIELD, INTRATE, TBILL* and others\n---------------------------------------------------------\n\nMost likely the differences can be explained with YEARFRAC/day count implementations. \nDURATION in OO is a completely different function, the analog of Excel one is called DURATION\\_ADD.\n*)\n// in our tests, the numbers for European 30/360 basis were the same.\nlet accrint basis = \n    Financial.AccrInt(DateTime(1990, 3, 4), DateTime(1993, 3, 31), \n        DateTime(1992, 3, 4), 0.07, 10000., Frequency.SemiAnnual, basis)\n\naccrint DayCountBasis.UsPsa30_360\n// [fsi:Excel: 1401.944444  LibreOffice: 1400.000000]\naccrint DayCountBasis.ActualActual\n// [fsi:Excel: 1398.076923  LibreOffice: 1401.917808]\naccrint DayCountBasis.Actual360\n// [fsi:Excel: 1394.166667  LibreOffice: 1421.388889]\naccrint DayCountBasis.Actual365\n// [fsi:Excel: 1399.041096  LibreOffice: 1401.917808]\n\nFinancial.AccrIntM(DateTime(1990, 3, 4), DateTime(2010, 6, 5), 0.1, 12030.34, DayCountBasis.ActualActual)\n// [fsi:Excel: 24367.7909   LibreOffice: 24383.68639]\n\nFinancial.Disc(DateTime(2003, 2, 14), DateTime(2004, 3, 31), 23., 100., DayCountBasis.ActualActual)\n// [fsi:Excel: 0.684757     LibreOffice: 0.683820]\n\nFinancial.Duration(DateTime(1980, 2, 15), DateTime(2000, 2, 28), 100., 0.03, \n    Frequency.Annual, DayCountBasis.Actual360)\n// [fsi:Excel: 8.949173     LibreOffice: 9.254729]\n\nFinancial.MDuration(DateTime(1980, 2, 15), DateTime(2000, 2, 28), 100., 0.03,\n    Frequency.SemiAnnual, DayCountBasis.Actual360)\n// [fsi:Excel: 8.860247     LibreOffice: 9.158550]\n\nFinancial.Price(DateTime(1980, 2, 15), DateTime(2000, 2, 28), 0.07, 0.1, 100., \n    Frequency.Annual, DayCountBasis.Actual360)\n// [fsi:Excel: 74.442516    LibreOffice: 74.334983]    \n\nFinancial.PriceDisc(DateTime(1980, 2, 15), DateTime(2000, 2, 28), 0.01, 100., DayCountBasis.ActualActual)\n// [fsi:Excel: 79.966367    LibreOffice: 80.005464] \n\nFinancial.IntRate(DateTime(1980, 2, 15), DateTime(1980, 5, 4), 23., 130., DayCountBasis.UsPsa30_360)\n// [fsi:Excel: 21.199780    LibreOffice: 21.471572]\n\nFinancial.TBillPrice(DateTime(1980, 2, 15), DateTime(1980, 3, 15), 2.)\n// [fsi:Excel: 83.888889    LibreOffice: 82.777778]\n\nFinancial.Received(DateTime(1980, 2, 15), DateTime(2000, 2, 28), 200., 0.01, DayCountBasis.ActualActual)\n// [fsi:Excel: 250.105148   LibreOffice: 249.982925]\n\n// the only function which seems to behave differently in Excel Office for Mac\nFinancial.AmorDegrc(100., DateTime(1998, 2, 28), DateTime(2000, 2, 29), \n    10., 0.3, 0.15, DayCountBasis.Actual365, true)\n// [fsi:Excel: 0    Excel for Mac: -2   LibreOffice: 75]\n\n(**\nAMORLINC\n--------\n\nAs stated [here](https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_AMORLINC_function), \nwhen the date of purchase is the end of a period, Excel regards the initial period 0 as the first full period, \nwhereas OO regards the initial period as of zero length and returns 0.  \nHowever, there\u0027re other differences too.\n*)\n\nFinancial.AmorLinc(100., DateTime(1998, 2, 28), DateTime(2000, 2, 29), 10., 0., 0.07, DayCountBasis.Actual365)\n// [fsi:Excel: 14.000000   LibreOffice: 14.019178]\nFinancial.AmorLinc(100., DateTime(1998, 2, 28), DateTime(2009, 6, 30), 50., 1.7, 0.1, DayCountBasis.UsPsa30_360)\n// [fsi:Excel: 0.0000000   LibreOffice: -63.33333]\n\n(**\nCOUPDAYS, COUPDAYSBS, COUPDAYSNC\n--------------------------------\n\nIn Excel the equality \u0060coupDays = coupDaysBS \u002B coupDaysNC\u0060 doesn\u0027t necessary hold when basis is other than Actual/Actual.\n*)\nlet cdParam = DateTime(1980, 2, 15), DateTime(2000, 2, 28), Frequency.Annual, DayCountBasis.UsPsa30_360\n\nFinancial.CoupDays cdParam \nFinancial.CoupDaysBS cdParam\nFinancial.CoupDaysNC cdParam\n// [fsi:Excel: 360 \u003C\u003E 345 \u002B 13  LibreOffice: 360 = 345 \u002B 15]\n\n(** \nCUMIPMT, CUMPRINC\n-----------------\n\nOO analogs are called CUMIPMT\\_ADD and CUMPRINC\\_ADD (they\u0027re expected to be [compatible with Excel](https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_CUMIPMT_ADD_function))\n*)\nFinancial.CumIPmt(0.6, 10., 100., 1.3, 2., PaymentDue.EndOfPeriod)\n// [fsi:Excel: -59.669577   LibreOffice: -119.669577]\nFinancial.CumPrinc(0.6, 10., 100., 1.3, 2., PaymentDue.EndOfPeriod)\n// [fsi:Excel: -0.8811289   LibreOffice: -1.431834]\n\n(**\nDB, DDB\n-------\n\nSeems like DDB doesn\u0027t accept fractional periods.\n*)\nFinancial.Db(100., 10., 1., 0.3, 1.)\n// [fsi:Excel: 7.5  LibreOffice: 0.0]\nFinancial.Ddb(100., 10., 1., 0.3, 1.)\n// [fsi:Excel: 90.0 LibreOffice: Err:502]\n\n(** \nIRR, XIRR\n---------\n\nThe implementation details of root finding algorithms might be the cause of differences. \nWe didn\u0027t check all the tests, because OO doesn\u0027t accept arrays as parameters (e.g. {-100;100}). But some of them don\u0027t work anyway.\n*)\nFinancial.XIrr([206101714.849377; -156650972.54265], [DateTime(2001, 2, 28); DateTime(2001, 3, 31)], -0.1)\n// [fsi:Excel: -0.960452    LibreOffice: Err:502 (Invalid argument)]"}]